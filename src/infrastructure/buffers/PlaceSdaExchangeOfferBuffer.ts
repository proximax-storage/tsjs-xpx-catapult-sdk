// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class PlaceSdaExchangeOfferBuffer {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): PlaceSdaExchangeOfferBuffer {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsPlaceSdaExchangeOfferBuffer(bb: flatbuffers.ByteBuffer, obj?: PlaceSdaExchangeOfferBuffer): PlaceSdaExchangeOfferBuffer {
    return (obj || new PlaceSdaExchangeOfferBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsPlaceSdaExchangeOfferBuffer(bb: flatbuffers.ByteBuffer, obj?: PlaceSdaExchangeOfferBuffer): PlaceSdaExchangeOfferBuffer {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new PlaceSdaExchangeOfferBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  mosaicIdGive(index: number): number | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
  }

  mosaicIdGiveLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  mosaicIdGiveArray(): Uint32Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
  }

  mosaicAmountGive(index: number): number | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
  }

  mosaicAmountGiveLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  mosaicAmountGiveArray(): Uint32Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
  }

  mosaicIdGet(index: number): number | null {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
  }

  mosaicIdGetLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  mosaicIdGetArray(): Uint32Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
  }

  mosaicAmountGet(index: number): number | null {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
  }

  mosaicAmountGetLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  mosaicAmountGetArray(): Uint32Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
  }

  duration(index: number): number | null {
    const offset = this.bb!.__offset(this.bb_pos, 12);
    return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
  }

  durationLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 12);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  durationArray(): Uint32Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 12);
    return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
  }

  static startPlaceSdaExchangeOfferBuffer(builder: flatbuffers.Builder) {
    builder.startObject(5);
  }

  static addMosaicIdGive(builder: flatbuffers.Builder, mosaicIdGiveOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, mosaicIdGiveOffset, 0);
  }

  static createMosaicIdGiveVector(builder: flatbuffers.Builder, data: number[] | Uint32Array): flatbuffers.Offset;
  /**
   * @deprecated This Uint8Array overload will be removed in the future.
   */
  static createMosaicIdGiveVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset;
  static createMosaicIdGiveVector(builder: flatbuffers.Builder, data: number[] | Uint32Array | Uint8Array): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addInt32(data[i]!);
    }
    return builder.endVector();
  }

  static startMosaicIdGiveVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4);
  }

  static addMosaicAmountGive(builder: flatbuffers.Builder, mosaicAmountGiveOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, mosaicAmountGiveOffset, 0);
  }

  static createMosaicAmountGiveVector(builder: flatbuffers.Builder, data: number[] | Uint32Array): flatbuffers.Offset;
  /**
   * @deprecated This Uint8Array overload will be removed in the future.
   */
  static createMosaicAmountGiveVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset;
  static createMosaicAmountGiveVector(builder: flatbuffers.Builder, data: number[] | Uint32Array | Uint8Array): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addInt32(data[i]!);
    }
    return builder.endVector();
  }

  static startMosaicAmountGiveVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4);
  }

  static addMosaicIdGet(builder: flatbuffers.Builder, mosaicIdGetOffset: flatbuffers.Offset) {
    builder.addFieldOffset(2, mosaicIdGetOffset, 0);
  }

  static createMosaicIdGetVector(builder: flatbuffers.Builder, data: number[] | Uint32Array): flatbuffers.Offset;
  /**
   * @deprecated This Uint8Array overload will be removed in the future.
   */
  static createMosaicIdGetVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset;
  static createMosaicIdGetVector(builder: flatbuffers.Builder, data: number[] | Uint32Array | Uint8Array): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addInt32(data[i]!);
    }
    return builder.endVector();
  }

  static startMosaicIdGetVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4);
  }

  static addMosaicAmountGet(builder: flatbuffers.Builder, mosaicAmountGetOffset: flatbuffers.Offset) {
    builder.addFieldOffset(3, mosaicAmountGetOffset, 0);
  }

  static createMosaicAmountGetVector(builder: flatbuffers.Builder, data: number[] | Uint32Array): flatbuffers.Offset;
  /**
   * @deprecated This Uint8Array overload will be removed in the future.
   */
  static createMosaicAmountGetVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset;
  static createMosaicAmountGetVector(builder: flatbuffers.Builder, data: number[] | Uint32Array | Uint8Array): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addInt32(data[i]!);
    }
    return builder.endVector();
  }

  static startMosaicAmountGetVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4);
  }

  static addDuration(builder: flatbuffers.Builder, durationOffset: flatbuffers.Offset) {
    builder.addFieldOffset(4, durationOffset, 0);
  }

  static createDurationVector(builder: flatbuffers.Builder, data: number[] | Uint32Array): flatbuffers.Offset;
  /**
   * @deprecated This Uint8Array overload will be removed in the future.
   */
  static createDurationVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset;
  static createDurationVector(builder: flatbuffers.Builder, data: number[] | Uint32Array | Uint8Array): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addInt32(data[i]!);
    }
    return builder.endVector();
  }

  static startDurationVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4);
  }

  static endPlaceSdaExchangeOfferBuffer(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createPlaceSdaExchangeOfferBuffer(builder: flatbuffers.Builder, mosaicIdGiveOffset: flatbuffers.Offset, mosaicAmountGiveOffset: flatbuffers.Offset, mosaicIdGetOffset: flatbuffers.Offset, mosaicAmountGetOffset: flatbuffers.Offset, durationOffset: flatbuffers.Offset): flatbuffers.Offset {
    PlaceSdaExchangeOfferBuffer.startPlaceSdaExchangeOfferBuffer(builder);
    PlaceSdaExchangeOfferBuffer.addMosaicIdGive(builder, mosaicIdGiveOffset);
    PlaceSdaExchangeOfferBuffer.addMosaicAmountGive(builder, mosaicAmountGiveOffset);
    PlaceSdaExchangeOfferBuffer.addMosaicIdGet(builder, mosaicIdGetOffset);
    PlaceSdaExchangeOfferBuffer.addMosaicAmountGet(builder, mosaicAmountGetOffset);
    PlaceSdaExchangeOfferBuffer.addDuration(builder, durationOffset);
    return PlaceSdaExchangeOfferBuffer.endPlaceSdaExchangeOfferBuffer(builder);
  }
}
