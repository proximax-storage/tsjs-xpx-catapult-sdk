// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class OpinionsBuffer {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OpinionsBuffer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOpinionsBuffer(bb:flatbuffers.ByteBuffer, obj?:OpinionsBuffer):OpinionsBuffer {
  return (obj || new OpinionsBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOpinionsBuffer(bb:flatbuffers.ByteBuffer, obj?:OpinionsBuffer):OpinionsBuffer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OpinionsBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

opinion(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

opinionLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

opinionArray():Uint32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startOpinionsBuffer(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addOpinion(builder:flatbuffers.Builder, opinionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, opinionOffset, 0);
}

static createOpinionVector(builder:flatbuffers.Builder, data:number[]|Uint32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createOpinionVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createOpinionVector(builder:flatbuffers.Builder, data:number[]|Uint32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startOpinionVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endOpinionsBuffer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createOpinionsBuffer(builder:flatbuffers.Builder, opinionOffset:flatbuffers.Offset):flatbuffers.Offset {
  OpinionsBuffer.startOpinionsBuffer(builder);
  OpinionsBuffer.addOpinion(builder, opinionOffset);
  return OpinionsBuffer.endOpinionsBuffer(builder);
}
}
